// define the version of GLSL to use
#version 400

// location and render order. Both defined for all verticies using a GL_ARRAY_BUFFER
layout(location = 0) in vec2 in_location;
layout(location = 1) in int in_render_order;
layout(location = 2) in vec2 in_UV;

// data to be sent and interpolated to the fragment shader
out UV;

// entry point
void main()
{
	// gl_Position is a special vec3 that defines the location in space.

	// set the x and y coordinates to the in_location defined for the vert.
	gl_Position.xy = in_location;

	// sets the z according to render order.
	gl_Position.z = -(9 - in_render_order);

	// sets w to one so it is a location instead of a direction. 
	// Read Homogeneous corodinates: http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/#Homogeneous_coordinates
	gl_Position.w = 1;

	// send the data to the fragment shader and interpolates it so it has the correct value
	UV = in_UV;
}