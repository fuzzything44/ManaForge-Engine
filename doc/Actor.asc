// This document was generated with the command: asciidoc.py -a icons -a toc2 -a iconsdir=icons\ -a source-highlighter=highlight testDocs.txt

Actor
=====
:Component: link:Component.html[`Component`]


Defined in header link:./../src/ManaForgeEngine/Public/Actor.h[`<Actor.h>`]


== Explanation ==

An `Actor` represents anything that can be placed.

== Member Types ==

|======================================================================================================================================================================================
| *Type and name*                                                        | *Explanation*

| `std::unique_ptr<ActorLocation> GUID` 	                             | The GUID. Used for networking and memory management within the link:World.html[`World`]. 

| `protected std::unique_ptr<ActorTransformController> transController`  | The handle on the link:PhysicsSystem.html[`PhysicsSystem`]. Used to get the transform of the `Actor`.

| `protected std::deque<Component*> components`                          | A `std::deque` of all of the {Component}s that the `Actor` contains. 

|======================================================================================================================================================================================


== Constructors ==

=== Main Constructor ===
[source, C++]
--------------------------------------------
Actor()
--------------------------------------------

.Explanation
The way to make a completely default `Actor`.

=== Move Constructor ===
[source, C++]
--------------------------------------------
Actor(
    Actor&& other                // <1>
)
--------------------------------------------

<1> The Actor to move from.

.Explanation
The way to move one actor to another. Invalidates `other`.

== Member Functions ==

=== `getWorldTransform` ===
[source, C++]
-------------------------------------------------
Transform getWorldTransform() const
-------------------------------------------------

.Explanation
Gets the {Transform} relative to the origin.

.Return Value
Returns the {Transform}.


=== `getWorldLocation` ===
[source, C++]
-------------------------------------------
vec2 getWorldLocation() const
-------------------------------------------

.Explanation
Returns the location relative to the origin.

.Return Value
Reutrns the `vec2`.


=== `getScale`
[source, C++]
---------------------------------------------
vec2 getScale() const
---------------------------------------------

.Explanation 
Gets the scale.

.Return Value
Returns the `vec2` representing the scale.


=== `getWorldRotation` ===
[source, C++]
-----------------------------------------------------
float getWorldRotation() const
-----------------------------------------------------

.Explanation
Gets the rotation relative to the origin.

.Return Value
Returns the rotation value.


=== `setScale` ===
[source, C++]
-----------------------------------------------------
void setScale(
    vec2 newScale                     // <1>
)
-----------------------------------------------------

<1> The new scale for the {Component}.

.Explanation
Sets the scale.


=== `setWorldLocation` ===
[source, C++]
-------------------------------------------------------
void setRelativeLocation(
    vec2 newLoc                          //<1>
)
-------------------------------------------------------

<1> The new location relative to the origin.


.Explanation
Sets the location relative to the origin. This is a sharp snap.


=== `setWorldRotation` ===
[source, C++]
------------------------------------------------------
void setRelativeRotation(
    float newRot                      // <1>
)
------------------------------------------------------

<1> The new rotation for the {Component} relative to the world.

.Explanation
Sets the new world rotation.


=== `setWorldTransform` ===
[source, C++]
--------------------------------------------------------
void setRelativeTransform(
    const Transform& newTrans             // <1> 
)
--------------------------------------------------------

<1> The new {Transform} relative to the origin.

.Explanation
Sets the {Transform} relative to the origin.



=== `addWorldLocation` ===
[source, C++]
-------------------------------------------------------
void addRelativeLocation(
    vec2 locToAdd                           // <1> 
)
-------------------------------------------------------

<1> The offset to add the the world rotation. 

.Explanation
Adds an offset to the world location.


=== `addWorldRotation` ===
[source, C++]
-------------------------------------------------------
void addRelativeRotation(
    float rotToAdd                       // <1>
)
-------------------------------------------------------

<1> The amount of rotation to offset the current rotation by.

.Explanation
Adds an amount of rotation to the current rotation amount.


=== `getModelMatrix` ===
[source, C++]
-------------------------------------------------------
mat3 getModelMatrix() const
-------------------------------------------------------

.Explanation 
Calculates the matrix for the model. Mainly useful for advanced location calculations and rendering.

.Return Value
Return a `mat3` representing all the transformation applied up to the point of the model.


=== `getPhysicsType` ===
[source, C++]
-----------------------------------------------------------
PhysicsType getPhysicsType() const
-----------------------------------------------------------

.Explanation 
Gets the link:PhysicsType.html[`PhysicsType`].

.Return Value
Returns the link:PhysicsType.html[`PhysicsType`].


=== `setPhysicsType` ===
[source, C++]
-----------------------------------------------
void setPhysicsType(
    PhysicsType newType              // <1>
)
-----------------------------------------------

<1> The new link:PhysicsType.html[`PhysicsType`] to use.

.Explanation
Sets the link:PhysicsType.html[`PhysicsType`].


=== `getVelocity` ===
[source, C++]
--------------------------------------------------------------------
vec2 getVelocity() const
--------------------------------------------------------------------

.Explanation 
Gets the linear velocity of the `Actor`.

.Return Value
A `vec2` representing the linear velocity.


=== `setVelocity` ===
[source, C++]
----------------------------------------------------------
void setVelocity(
    const vec2& newVelocity                  // <1> 
)
----------------------------------------------------------

<1> The new linear velocity. 

.Explanation
Sets the new linear velocity. 

NOTE: If this is very different from the current value it will look strange.

=== `applyLocalForce` ===
[source, C++]
---------------------------------------------------------------------
void applyLocalForce(
    vec2 localForce,                        // <1>
    vec2 localPoint                         // <2>
)
---------------------------------------------------------------------

<1> The magnitude and direction of the force.
<2> The location to use as the epicenter of the force, (0, 0) being the center of the `Actor`.

.Explanation
Applys a force to the `Actor`. 

[icon="./icons/example.png"]
.Example
NOTE: An explosion



=== `applyWorldForce` ===
[source, C++]
---------------------------------------------------------------------
void applyWorldForce(
    vec2 worldForce,                  // <1> 
    vec2 worldPoint                   // <2>
)
---------------------------------------------------------------------

<1> The magnitude and direction of the force.
<2> The location to use as the epicenter of the force, (0, 0) being the origin.

.Explanation
Applys a force to the `Actor`. 


=== `setAngularVelocity` ===
[source, C++]
--------------------------------------------------------
void setAngularVelocity(
    float newVelocity                 // <1>
)
--------------------------------------------------------

<1> The new angular velocity.

.Explanation
Sets the angular velocity.

NOTE: Angular velocity is the spinning velocity, if you were to spin a top.


=== `getAngularVelocity` ===
[source, C++]
--------------------------------------------------
float getAngularVelocity()
--------------------------------------------------

.Explanation
Gets the angular velocity.

.Return Value
Returns the angular velocity.

NOTE: Angular velocity is the spinning velocity, if you were to spin a top.


=== `applyTorque` ===
[source, C++]
----------------------------------------------
void applyTorque(
    float magnitude           // <1> 
)
----------------------------------------------

<1> The magnitude of torque to apply to the `Actor`. May be negative.

.Explanation
Applys torque.

NOTE: Torque is trying to spin something. The more mass the object has, the more torque it will take to change its angular velocity much.


== See Also ==
 . {Component}
 . link:TickingActor.html[`TickingActor`]