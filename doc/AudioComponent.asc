// This document was generated with the command: asciidoc.py -a icons -a toc2 -a iconsdir=icons\ AudioComponent.txt

AudioComponent
==============

Defined in header link:./../src/ManaForgeEngine/Public/AudioComponent.h[`<AudioComponent.h>`]

Inherits From: link:SceneComponent.html[SceneComponent]

== Explanation ==

An `AudioComponent` acts as a thin wrapper around link:SoundSource.html[`SoundSource`].

== Constructors ==

=== Main Constructor ===
[source, C++]
--------------------------------------------
explicit AudioComponent(
    Actor& owner,                      //<1>
    SoundCue& cue,                     //<2>
    Transform trans = Transform{},     //<3>
    bool loops = false                 //<4>
)
--------------------------------------------

<1> The owning Actor
<2> The link:SoundCue.html[`SoundCue`] to play.
<3> The link:Transform.html[`Transform`] that the component is placed at relative to the owning actor
<4> If the sound should loop

.Explanation
The constructor that you want when constructing an `AudioComponent` from scratch

=== Move Constructor ===
[source, C++]
--------------------------------------------
AudioComponent(
    AudioComponent&& other			//<1>
)
--------------------------------------------

<1> The other `AudioComponent` to Move from. It will be invalid after moving.

.Explanation
Standard move constructor.

== Member Functions ==

=== `setLoops` ===
[source, C++]
------------------------------------
void setLoops(
   bool loops                 //<1>
)
------------------------------------

<1> If the sound should loop.

.Explanation
Sets if the sound should loop.

=== `getLoops` ===
[source, C++]
------------------------------------
bool getLoops()
------------------------------------

.Explanation
Returns true if the sound loops.

.Return Value
If the sound loop

=== `play` ===
[source, C++]
------------------------------------
void play()
------------------------------------

.Explanation
Starts/resumes playback of the audio in the link:SoundCue.html[`SoundCue`].

=== `pause` ===
[source, C++]
------------------------------------
void pause()
------------------------------------

.Explanation
Pauses the playback. When resumed it will continue from the current position.

=== `stop` ===
[source, C++]
------------------------------------
void stop()
------------------------------------

.Explanation
Stops the playback. When resumed it will continue from the start.

=== `setMaxDistance` ===
[source, C++]
------------------------------------
void setMaxDistance(
    float maxDistance          //<1>
)
------------------------------------

<1> The distance after no attenuation will be applied.

.Explanation
Sets the distance after no attenuation will be applied.

=== `getMaxDistance` ===
------------------------------------
float getMaxDistance()
------------------------------------

.Explanation
Gets the distance after no attenuation will be applied.

.Return Value
The distance after no attenuation will be applied.

=== `setRolloffFactor` ===
[source, C++]
---------------------------------------
void setRolloffFactor(
    float rolloffFactor		//<1>
)
---------------------------------------

<1> The new multiplier for attenuation. A larger value will make attenuation fater. Defaults to one.

.Explanation
Sets the Rolloff Factor. Explained above.


=== `getRolloffFactor` ===
[source, C++]
---------------------------------------
float getRolloffFactor()
---------------------------------------

.Explanation
Gets the multiplier for attenuation. A larger value will make attenuation fater. Defaults to one.

.Return Value
Returns the Rolloff Factor. Explained above.

=== `setReferenceDistance` ===
[source, C++]
--------------------------------------------
void setReferenceDistance(
    float refrenceDistance         //<1>
)
--------------------------------------------

<1> The maximum distance that the source will be the loudest; for how far the source will be at its loudest.

.Explanation
Sets the refrenceDistance. Explained above.


=== `getReferenceDistance` ===
[source, C++]
---------------------------------------
float getReferenceDistance()
---------------------------------------

.Explanation
Gets the maximum distance that the source will be the loudest; for how far the source will be at its loudest.

.Return Value
Returns the Refrence Distance. Explained above.


=== `setConeParams` ===
[source, C++]
--------------------------------------------------
void setConeParams(
		vec2 direction = vec2{},       //<1>
		float innerAngle = 360.f,      //<2>
		float outerAngle = 360.f,      //<3>
		float outerGain = 0.f          //<4>
)
--------------------------------------------------

<1> The direction the cone faces, as a vector.
<2> The angle which the sound will be loudest at. 
<3> The angle which the sound will still be audible at, but attenuation will apply.
<4> The gain applied when outside the cone. Will usually be less than one. 

.Explanation
Sets the parameters necessary to setup a cone effect, like a megephone. 

