// This document was generated with the command: asciidoc.py -a icons -a toc2 -a iconsdir=icons\ -a source-highlighter=highlight testDocs.txt
SceneComponent
==============
:Actor: link:Actor.html[Actor]

:Transform: link:Transform.html[Transform]

:Component: link:Component.html[Component]

Defined in header link:./../src/ManaForgeEngine/Public/AudioComponent.h[`<SceneComponent.h>`]

Inherits From: {Component}


== Explanation ==

A `SceneComponent` is a {Component} that has a {Transform}


== Constructors ==

=== Main Constructor ===
[source, C++]
-------------------------------------------------
SceneComponent(
    Actor& owner,                         //<1>
    Transform trans = Transform{}         //<2>
)
-------------------------------------------------

<1> A refrence to the owner actor. Often `*this`.
<2> The transform to spawn the component at, relative to the owning {Actor}.

.Explanation
The basic constructor for a brand new `SceneComponent` .

== Member Functions ==

=== `getRelativeTransform` ===
[source, C++]
-----------------------------------------
Transform getRelativeTransform() const
-----------------------------------------

.Explanation
Gets the {Transform} relative to the owning {Actor}.

.Return Value
Returns the {Transform}.

=== `getWorldTransform` ===
[source, C++]
-------------------------------------------------
Transform getWorldTransform() const
-------------------------------------------------

.Explanation
Gets the {Transform} relative to the origin.

.Return Value
Returns the {Transform}.

=== `getWorldLocation` ===
[source, C++]
-------------------------------------------
vec2 getWorldLocation() const
-------------------------------------------

.Explanation
Returns the location relative to the origin.

.Return Value
Reutrns the `vec2`.


=== `getRelativeLocation` ===
[source, C++]
----------------------------------------------
vec2 getRelativeLocation() const
----------------------------------------------

.Explanation
Returns the location relative to the owning {Actor}.

.Return Value
Returns the vec2.


=== `getScale`
[source, C++]
---------------------------------------------
vec2 getScale() const
---------------------------------------------

.Explanation 
Gets the scale.

.Return Value
Returns the `vec2` representing the scale.

=== `getRelativeRotation` ===
[source, C++]
-----------------------------------------------
float getRelativeRotation() const
-----------------------------------------------

.Explanation
Gets the Rotation relative to the owning {Actor}.

.Return Value
Reutrns the rotation. Yaw only.

=== `getWorldRotation` ===
[source, C++]
-----------------------------------------------------
float getWorldRotation() const
-----------------------------------------------------

.Explanation
Gets the rotation relative to the origin.

.Return Value
Returns the rotation value.


=== `setRelativeLocation` ===
[source, C++]
-------------------------------------------------------
void setRelativeLocation(
    vec2 newLoc                          //<1>
)
-------------------------------------------------------

<1> The new location relative to the owning {Actor}.


.Explanation
Sets the location relative to the owning {Actor}. This is a sharp snap.


=== `setScale` ===
[source, C++]
-----------------------------------------------------
void setScale(
    vec2 newScale                     // <1>
)
-----------------------------------------------------

<1> The new scale for the {Component}.

.Explanation
Sets the scale.


=== `setRelativeRotation` ===
[source, C++]
------------------------------------------------------
void setRelativeRotation(
    float newRot                      // <1>
)
------------------------------------------------------

<1> The new rotation for the {Component} relative to the owning {Actor}.

.Explanation
Sets the new relative rotation.


=== `setRelativeTransform` ===
[source, C++]
--------------------------------------------------------
void setRelativeTransform(
    const Transform& newTrans             // <1> 
)
--------------------------------------------------------

<1> The new {Transform} relative to the owning {Actor}.

.Explanation
Sets the {Transform} relative to the owning {Actor}.


=== `addRelativeLocation` ===
[source, C++]
-------------------------------------------------------
void addRelativeLocation(
    vec2 locToAdd                           // <1> 
)
-------------------------------------------------------

<1> The offset to add the the local rotation. 

.Explanation
Adds an offset to the {Component}.


=== `addRelativeRotation` ===
[source, C++]
-------------------------------------------------------
void addRelativeRotation(
    float rotToAdd                       // <1>
)
-------------------------------------------------------

<1> The amount of rotation to offset the current rotation by.

.Explanation
Adds an amount of rotation to the current rotation amount.

=== `getModelMatrix` ===
[source, C++]
-------------------------------------------------------
mat3 getModelMatrix() const
-------------------------------------------------------

.Explanation 
Calculates the matrix for the model. Mainly useful for advanced location calculations and rendering.

.Return Value
Return a `mat3` representing all the transformation applied up to the point of the model.



== See Also ==
 . {Component}
 . 


